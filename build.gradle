
plugins {
    id "groovy"
    id "maven-publish"
    id "signing"
}

repositories {
    mavenCentral()
}

configurations {
    provided
}

sourceSets {
    main { compileClasspath += configurations.provided }
    test {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
}

dependencies {
    provided localGroovy()
    provided "org.spockframework:spock-core:1.3-groovy-2.5"

    implementation "cglib:cglib-nodep:3.3.0"
}

java {
    withJavadocJar()
    withSourcesJar()
}

String publishUser = project.findProperty("publish.user")
String publishPassword = project.findProperty("publish.password")
String publishUrl = project.findProperty("publish.url")

publishing {
    repositories {
        maven {
            name = "test"
            url = layout.buildDirectory.dir("local-repo")
        }
        maven {
            name = "remote"
            url = publishUrl
            credentials {
                username publishUser
                password publishPassword
            }
        }
    }
    publications {
        lib(MavenPublication) {
            from components.java
            pom {
                name = "Jenkins Shared Library Test Framework"
                packaging = "jar"
                description = "Spock test framework for unit testing Jenkins Shared Libraries"
                url = "https://github.com/papiocloudsoftware/shared-library-test-framework"

                scm {
                    url = "https://github.com/papiocloudsoftware/shared-library-test-framework"
                    connection = "scm:git:https://github.com/papiocloudsoftware/shared-library-test-framework.git"
                    developerConnection = "scm:git:https://github.com/papiocloudsoftware/shared-library-test-framework.git"
                }

                licenses {
                    license {
                        name = "MIT License"
                        url = "http://www.opensource.org/licenses/mit-license.php"
                        distribution = "repo"
                    }
                }

                developers {
                    developer {
                        id = "mschenke"
                        name = "Max Schenkelberg"
                        email = "max@papiocloud.com"
                    }
                }
            }
        }
    }
}

def signingKeyFile = findProperty("signing.keyfile")
def signingKey = signingKeyFile ? file(signingKeyFile).text : null
def signingPassword = findProperty("signing.password")

if (signingKey != null && signingPassword != null) {
    signing {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.lib
    }
}

task setReleaseVersion {
    doFirst {
        project.version = project.version - "-SNAPSHOT"
        def props = new Properties()
        def gradleProps = file("gradle.properties")
        gradleProps.withInputStream {
            props.load(it)
        }
        props.version = project.version
        gradleProps.withOutputStream {
            props.store(it, null)
        }
    }
}

task updateSnapshotVersion {
    dependsOn tasks.setReleaseVersion
    doFirst {
        def props = new Properties()
        def gradleProps = file("gradle.properties")
        gradleProps.withInputStream {
            props.load(it)
        }
        String[] versionParts = project.version.split("[.]")
        versionParts[versionParts.length - 1] = (Integer.parseInt(versionParts[versionParts.length - 1]) + 1) + "-SNAPSHOT"
        props.version = versionParts.join(".")
        gradleProps.withOutputStream {
            props.store(it, null)
        }
    }
}

task publishToRemote {
    dependsOn tasks.publishLibPublicationToRemoteRepository
}

